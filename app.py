import streamlit as st
import numpy as np
import plotly.graph_objects as go

st.set_page_config(layout="wide")
st.title("üß™ –°–∏–º—É–ª–∞—Ü–∏—è –Ω–∞ —Å–±–ª—ä—Å—ä–∫ –Ω–∞ —á–∞—Å—Ç–∏—Ü–∏ —Å –¥–∏–Ω–∞–º–∏—á–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è –∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏")

# –í—Ö–æ–¥–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
col1, col2 = st.columns(2)
with col1:
    m1 = st.number_input("–ú–∞—Å–∞ –Ω–∞ —á–∞—Å—Ç–∏—Ü–∞ 1 (kg)", min_value=0.1, value=5.0, step=0.1)
    v1 = st.number_input("–ù–∞—á–∞–ª–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏—Ü–∞ 1 (m/s)", value=5.0, step=0.1)
with col2:
    m2 = st.number_input("–ú–∞—Å–∞ –Ω–∞ —á–∞—Å—Ç–∏—Ü–∞ 2 (kg)", min_value=0.1, value=5.0, step=0.1)
    v2 = st.number_input("–ù–∞—á–∞–ª–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏—Ü–∞ 2 (m/s)", value=-3.0, step=0.1)

# –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –∫—Ä–∞–π–Ω–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–∏ –∏–¥–µ–∞–ª–µ–Ω –µ–ª–∞—Å—Ç–∏—á–µ–Ω —Å–±–ª—ä—Å—ä–∫
v1_final = ((m1 - m2) / (m1 + m2)) * v1 + ((2 * m2) / (m1 + m2)) * v2
v2_final = ((2 * m1) / (m1 + m2)) * v1 + ((m2 - m1) / (m1 + m2)) * v2

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ —Å–∏–º—É–ª–∞—Ü–∏—è
x1_start = 0
x2_start = 10
t_total = 4.0  # –æ–±—â–æ –≤—Ä–µ–º–µ
frames = 50

t = np.linspace(0, t_total, frames)

# –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ –≤—Ä–µ–º–µ –Ω–∞ —Å–±–ª—ä—Å—ä–∫ (–∫–æ–≥–∞—Ç–æ x1 –∏ x2 —Å–µ —Å—Ä–µ—â–Ω–∞—Ç)
if v1 == v2:
    t_collision = t_total  # –Ω–∏–∫–æ–≥–∞ –Ω–µ —Å–µ —Å–±–ª—ä—Å–∫–≤–∞—Ç
else:
    t_collision = (x2_start - x1_start) / (v1 - v2)
    if t_collision < 0 or t_collision > t_total:
        t_collision = t_total  # –∞–∫–æ —Å–±–ª—ä—Å—ä–∫—ä—Ç –µ –∏–∑–≤—ä–Ω –≤—Ä–µ–º–µ–≤–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª

# –ü–æ–∑–∏—Ü–∏–∏ –Ω–∞ —á–∞—Å—Ç–∏—Ü–∏—Ç–µ –≤ 1D (x-–æ—Å)
x1_positions = np.zeros_like(t)
x2_positions = np.zeros_like(t)

for i, time in enumerate(t):
    if time <= t_collision:
        x1_positions[i] = x1_start + v1 * time
        x2_positions[i] = x2_start + v2 * time
    else:
        x1_positions[i] = x1_start + v1 * t_collision + v1_final * (time - t_collision)
        x2_positions[i] = x2_start + v2 * t_collision + v2_final * (time - t_collision)

# –°—ä–∑–¥–∞–≤–∞–º–µ —Ñ–∏–≥—É—Ä–∞ –∑–∞ Plotly 3D (–¥–≤–∏–∂–µ–Ω–∏–µ —Å–∞–º–æ –ø–æ X, Y=0, Z=0)
frames_list = []
for i in range(frames):
    frame = go.Frame(data=[
        go.Scatter3d(x=[x1_positions[i]], y=[0], z=[0], mode='markers+text',
                     marker=dict(size=12, color='blue'),
                     text=["–ß–∞—Å—Ç–∏—Ü–∞ 1"], textposition="top center"),
        go.Scatter3d(x=[x2_positions[i]], y=[0], z=[0], mode='markers+text',
                     marker=dict(size=12, color='red'),
                     text=["–ß–∞—Å—Ç–∏—Ü–∞ 2"], textposition="top center"),
    ])
    frames_list.append(frame)

fig = go.Figure(
    data=[
        go.Scatter3d(x=[x1_positions[0]], y=[0], z=[0], mode='markers+text',
                     marker=dict(size=12, color='blue'),
                     text=["–ß–∞—Å—Ç–∏—Ü–∞ 1"], textposition="top center"),
        go.Scatter3d(x=[x2_positions[0]], y=[0], z=[0], mode='markers+text',
                     marker=dict(size=12, color='red'),
                     text=["–ß–∞—Å—Ç–∏—Ü–∞ 2"], textposition="top center"),
    ],
    layout=go.Layout(
        scene=dict(
            xaxis=dict(range=[-5, 15], title='–ü–æ–∑–∏—Ü–∏—è (m)'),
            yaxis=dict(range=[-5, 5], title='Y'),
            zaxis=dict(range=[-5, 5], title='Z'),
        ),
        title="3D –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞ —Å–±–ª—ä—Å—ä–∫ –Ω–∞ —á–∞—Å—Ç–∏—Ü–∏",
        margin=dict(l=0, r=0, b=0, t=40),
        height=500,
        updatemenus=[dict(type="buttons", showactive=False,
                          y=1,
                          x=1.15,
                          xanchor="right",
                          yanchor="top",
                          buttons=[dict(label="‚ñ∂ –ü—É—Å–Ω–∏ –∞–Ω–∏–º–∞—Ü–∏—è—Ç–∞",
                                        method="animate",
                                        args=[None, {"frame": {"duration": 100, "redraw": True},
                                                     "fromcurrent": True,
                                                     "transition": {"duration": 0}}])])]
    ),
    frames=frames_list
)

st.plotly_chart(fig, use_container_width=True)

# –°—ä—Å—Ç–æ—è–Ω–∏–µ –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
if 'show_results' not in st.session_state:
    st.session_state.show_results = False

if st.button("–ü–æ–∫–∞–∂–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –æ—Ç —Å–±–ª—ä—Å—ä–∫–∞"):
    st.session_state.show_results = True

if st.session_state.show_results:
    impulse_before = m1 * v1 + m2 * v2
    impulse_after = m1 * v1_final + m2 * v2_final

    energy_before = 0.5 * m1 * v1 ** 2 + 0.5 * m2 * v2 ** 2
    energy_after = 0.5 * m1 * v1_final ** 2 + 0.5 * m2 * v2_final ** 2

    st.markdown("## –†–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç —Å–±–ª—ä—Å—ä–∫–∞")
    st.write(f"**–ò–º–ø—É–ª—Å –ø—Ä–µ–¥–∏ —Å–±–ª—ä—Å—ä–∫–∞:** {impulse_before:.2f} kg¬∑m/s")
    st.write(f"**–ò–º–ø—É–ª—Å —Å–ª–µ–¥ —Å–±–ª—ä—Å—ä–∫–∞:** {impulse_after:.2f} kg¬∑m/s")
    st.write(f"**–ö–∏–Ω–µ—Ç–∏—á–Ω–∞ –µ–Ω–µ—Ä–≥–∏—è –ø—Ä–µ–¥–∏ —Å–±–ª—ä—Å—ä–∫–∞:** {energy_before:.2f} J")
    st.write(f"**–ö–∏–Ω–µ—Ç–∏—á–Ω–∞ –µ–Ω–µ—Ä–≥–∏—è —Å–ª–µ–¥ —Å–±–ª—ä—Å—ä–∫–∞:** {energy_after:.2f} J")

    st.markdown("""
    ### –í—ä–ø—Ä–æ—Å–∏ –∑–∞ —Ä–∞–∑–º–∏—Å—ä–ª
    - –ó–∞–ø–∞–∑–≤–∞ –ª–∏ —Å–µ –∏–º–ø—É–ª—Å—ä—Ç?
    - –ó–∞–ø–∞–∑–≤–∞ –ª–∏ —Å–µ –∫–∏–Ω–µ—Ç–∏—á–Ω–∞—Ç–∞ –µ–Ω–µ—Ä–≥–∏—è?
    - –ö–∞–∫ –º–∞—Å–∞—Ç–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏—Ü–∏—Ç–µ –≤–ª–∏—è—è—Ç –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞?
    - –ö–∞–∫—ä–≤ —Ç–∏–ø —Å–±–ª—ä—Å—ä–∫ –µ —Ç–æ–≤–∞ (–µ–ª–∞—Å—Ç–∏—á–µ–Ω, –Ω–µ–µ–ª–∞—Å—Ç–∏—á–µ–Ω)?
    """)

    hypothesis = st.text_area("–í—ä–≤–µ–¥–∏ —Å–≤–æ—è —Ö–∏–ø–æ—Ç–µ–∑–∞ –∑–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –æ—Ç —Å–±–ª—ä—Å—ä–∫–∞:")
    if st.button("–ò–∑–ø—Ä–∞—Ç–∏ —Ö–∏–ø–æ—Ç–µ–∑–∞—Ç–∞"):
        if hypothesis.strip() == "":
            st.warning("–ú–æ–ª—è, –≤—ä–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞ —Ö–∏–ø–æ—Ç–µ–∑–∞—Ç–∞ —Å–∏.")
        else:
            st.success("–•–∏–ø–æ—Ç–µ–∑–∞—Ç–∞ —Ç–∏ –µ –∏–∑–ø—Ä–∞—Ç–µ–Ω–∞! –ú–Ω–æ–≥–æ –¥–æ–±—Ä–µ, —á–µ –º–∏—Å–ª–∏—à –∞–∫—Ç–∏–≤–Ω–æ!")

